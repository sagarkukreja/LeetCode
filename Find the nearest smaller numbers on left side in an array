// Java implementation of simple 
// algorithm to find smaller 
// element on left side
import java.io.*;
import java.util.Stack;
class GFG {

// Prints smaller elements on 
// left side of every element
static void printPrevSmaller(int []arr, int n)
{
	Stack<Integer> st = new Stack<>();
	for(int i = 0;i<n;i++){
	    while(!st.empty() && st.peek()>=arr[i]){
	        st.pop();
	        
	    }
	    if(st.empty())
	        System.out.print("_");
	    else
	        System.out.print(st.pop());
	        
	   st.push(arr[i]);
	}
	
	
}

	// Driver Code
	public static void main (String[] args)
	{
		int []arr = {1, 3, 0, 2, 5};
		int n = arr.length;
		printPrevSmaller(arr, n);
	}
}

// Method 2

// Java implementation of simple 
// algorithm to find smaller 
// element on left side
import java.io.*;
class GFG {

// Prints smaller elements on 
// left side of every element
static void printPrevSmaller(int []arr, int n)
{
	
	for(int i = 1;i<n;i++){
	    for(int j= i-1;j>=0;j--){
	        if(arr[j]<arr[i]){
	            System.out.print(arr[j]+",");
	            break;
	        }
	    }
	}
}

	// Driver Code
	public static void main (String[] args)
	{
		int []arr = {1, 3, 0, 2, 5};
		int n = arr.length;
		printPrevSmaller(arr, n);
	}
}

// 

